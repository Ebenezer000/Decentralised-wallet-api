## from multichain_wallet import MultiChainWallet

# Initialize the wallet with a mnemonic phrase
mnemonic = "your mnemonic phrase here"
wallet = MultiChainWallet(mnemonic)

Deriving Accounts

Ethereum Account

eth_account = wallet.get_eth_account()
print(f"Ethereum Address: {eth_account['address']}, Private Key: {eth_account['private_key']}")

Solana Account

solana_account = wallet.get_solana_account()
print(f"Solana Address: {solana_account.public_key}")

Tron Account

tron_account = wallet.get_tron_account()
print(f"Tron Address: {tron_account['address']}, Private Key: {tron_account['private_key']}")

Bitcoin Account

btc_account = wallet.get_bitcoin_account()
print(f"Bitcoin Address: {btc_account['address']}, Private Key: {btc_account['private_key']}")

Transferring Funds

## Usage

Initializing the Wallet

## from bip_utils import Bip44Coins

Solana Transfer

from solana.rpc.api import Client
from solana.keypair import Keypair
from solana.transaction import Transaction
from solana.system_program import TransferParams, transfer

def transfer_sol(client: Client, sender: Keypair, recipient_address: str, amount_sol: float) -> str:
    recipient_pubkey = PublicKey(recipient_address)
    amount_lamports = int(amount_sol * 1_000_000_000)
    txn = Transaction().add(transfer(TransferParams(from_pubkey=sender.public_key, to_pubkey=recipient_pubkey, lamports=amount_lamports)))
    txn_signature = client.send_transaction(txn, sender, opts=Confirmed)
    return txn_signature["result"]

Bitcoin Transfer

def transfer_btc(private_key: str, recipient_address: str, amount_btc: float, testnet: bool = False) -> str:
    from bit import Key, PrivateKeyTestnet
    sender = (PrivateKeyTestnet if testnet else Key)(private_key)
    tx_hash = sender.send([(recipient_address, amount_btc, 'btc')])
    return tx_hash

Litecoin Transfer

def transfer_ltc(private_key: str, recipient_address: str, amount_ltc: float) -> str:
    from blockcypher import simple_spend
    amount_satoshis = int(amount_ltc * 1e8)
    tx_hash = simple_spend(from_privkey=private_key, to_address=recipient_address, to_satoshis=amount_satoshis, coin_symbol='ltc')
    return tx_hash

Dogecoin Transfer

def transfer_doge(private_key: str, recipient_address: str, amount_doge: float) -> str:
    from blockcypher import simple_spend
    amount_satoshis = int(amount_doge * 1e8)
    tx_hash = simple_spend(from_privkey=private_key, to_address=recipient_address, to_satoshis=amount_satoshis, coin_symbol='doge')
    return tx_hash
